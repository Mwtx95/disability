generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  AVAILABLE
  MAINTENANCE
  RENTED
  NOT_AVAILABLE
}

model Asset {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  status      Status    @default(AVAILABLE)
  Location    Location? @relation(fields: [locationId], references: [id])
  locationId  Int?
  assignedTo  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isBlocked   Boolean   @default(false)
  Asset       Asset[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String
  UserProfile UserProfile[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
}

model User {
  id           Int       @id @default(autoincrement())
  username     String
  password     String
  email        String
  refreshToken String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  UserProfile UserProfile[]
}

model UserProfile {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Location {
  id             Int       @id @default(autoincrement())
  name           String
  type           String
  parentLocation String?
  description    String?
  Asset          Asset[]
  isBlocked      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
}
